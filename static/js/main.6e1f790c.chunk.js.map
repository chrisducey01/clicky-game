{"version":3,"sources":["components/Gamecard.js","components/GamePrompt.js","components/Header.js","utils/API.js","containers/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","className","alt","GamePrompt","msg","correctGuess","Header","highScore","score","BASEURL","APIKEY","searchTerm","limit","rating","axios","get","GameContainer","state","gameCards","numOfCards","chosenCards","handleClick","id","includes","console","log","setState","concat","shuffleCards","this","getPhotos","API","then","res","data","tempArr","forEach","sticker","push","imgSrc","images","fixed_width_still","url","catch","err","tempOldLayout","tempNewLayout","i","index","Math","floor","random","length","splice","map","card","key","src","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e1f790c.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction GameCard(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"card-body p-2\">\n                <img {...props} alt=\"Placeholder\"></img>\n            </div>\n        </div>\n    );\n}\n\nexport default GameCard;","import React from \"react\";\n\nfunction GamePrompt(props) {\n    let msg = \"\";\n    if (props.correctGuess) msg = \"You guessed correctly!\";\n    else if (props.correctGuess != null) msg = \"You guessed incorrectly...\";\n\n    return (\n        <div>{msg}</div>\n    )\n}\n\nexport default GamePrompt;","import React from \"react\";\nimport GamePrompt from \"./GamePrompt\"\n\nfunction Header(props) {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <ul>\n                <li className=\"brand\">Clicky Game</li>\n                <li><GamePrompt correctGuess={props.correctGuess}/></li>\n                <li>High Score: {props.highScore} | Score: {props.score}</li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Header;","import axios from \"axios\";\nconst BASEURL = \"https://api.giphy.com/v1/gifs/search\";\nconst APIKEY = \"DHFPFZvIU7Bue4giRFcQrRYyH0kMKDEU\";\n\nexport default {\n  search: function(searchTerm, limit=20, rating=\"g\") {\n    return axios.get(`${BASEURL}?api_key=${APIKEY}&q=${searchTerm}&limit=${limit}&rating=${rating}`);\n  }\n};\n","import React, { Component } from \"react\";\nimport GameCard from \"../components/Gamecard\";\nimport Header from \"../components/Header\";\nimport API from \"../utils/API\";\n\n\nclass GameContainer extends Component {\n    state = {\n        gameCards: [],\n        highScore: 0,\n        score: 0,\n        numOfCards: 12,\n        chosenCards: [],\n        correctGuess: null\n    }\n\n    componentDidMount() {\n        this.getPhotos();\n    }\n\n    getPhotos() {\n        API.search(\"pokemon\", this.state.numOfCards)\n            .then(res => {\n                console.log(res.data.data);\n                const tempArr = [];\n                res.data.data.forEach(sticker => {\n                    tempArr.push({ imgSrc: sticker.images.fixed_width_still.url, id: sticker.id });\n                });\n                this.setState({ gameCards: tempArr });\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    handleClick = id => {\n        if (this.state.chosenCards.includes(id)) {\n            console.log(`You lose!  You already chose that card dummy! Id: ${id}`);\n            this.setState(\n                {\n                    highScore: this.state.score > this.state.highScore ? this.state.score : this.state.highScore,\n                    score: 0,\n                    chosenCards: [],\n                    correctGuess: false\n                }\n            );\n        }\n        else {\n            console.log(`Great job!  You haven't picked that card yet.  Id: ${id}`);\n            this.setState(\n                {\n                    chosenCards: this.state.chosenCards.concat(id),\n                    score: this.state.score + 1,\n                    correctGuess: true\n                }\n            );\n        }\n        this.shuffleCards();\n    }\n\n    shuffleCards() {\n        const tempOldLayout = this.state.gameCards;\n        let tempNewLayout = [];\n\n        for (let i = 0; i < this.state.numOfCards; i++) {\n            let index = Math.floor(Math.random() * tempOldLayout.length);\n            tempNewLayout = tempNewLayout.concat(tempOldLayout.splice(index, 1));\n        }\n        this.setState({ gameCards: tempNewLayout });\n    }\n\n    render() {\n        return (\n            <div>\n                <Header score={this.state.score} highScore={this.state.highScore} correctGuess={this.state.correctGuess}/>\n                <div className=\"container mt-5\">\n                    <div className={(this.state.correctGuess === true || this.state.correctGuess === null) ? \"row justify-content-center\"  : \"row justify-content-center shake\"}>\n                        {this.state.gameCards.map(card => {\n                            return (\n                                <div className=\"col-md-3 my-2\">\n                                    <GameCard key={card.id} id={card.id} src={card.imgSrc} onClick={() => this.handleClick(card.id)} />\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GameContainer;","import React from 'react';\nimport './App.css';\nimport GameContainer from \"./containers/GameContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}